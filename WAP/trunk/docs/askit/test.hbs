## 单元测试
单元测试基于spring-test进行了封装，提供以下几种使用情况

. SpringMVCTestNGCase 支持spring-mvc的测试
. SpringTestNGCase支持一般spring的测试，不支持mvc和事务
. SpringTransactionalTestNGCase，支持spirng事务的测试，默认会激活 test profile。

测试类根据需要继承其中一个测试基类后并指定spring配置文件如：  `@ContextConfiguration(locations = {"/context-fragment-orm-jpa.xml"})`  即可。 +
测试框架基于testng，关于testng使用请参考：

. http://www.cnblogs.com/xguo/p/3300358.html
. http://testng.org/doc/documentation-main.html

### POM引用
```xml
<dependency>
    <groupId>cn.bgonline.askit.modules</groupId>
    <artifactId>askit-test</artifactId>
    <version>${askit.version}</version>
</dependency>
```

### 一般测试用法及配置

Spring 集成配置::
```xml
<beans profile="test">
    <jdbc:embedded-database id="dataSource" type="H2">
        <!--导入初始数据-->
        <jdbc:script encoding="utf-8" location="classpath:sql/sql-schema-*.sql"/>
        <jdbc:script encoding="utf-8" location="classpath:sql/sql-data-*.sql"/>
    </jdbc:embedded-database>
</beans>
```

### Spring MVC控制器测试

.实例：
====
```java
@ContextHierarchy({ #<1>
        @ContextConfiguration(locations = {"/spring/applicationContext-orm-Jpa.xml", "/spring/applicationContext-test.xml"}),  #<2>
        @ContextConfiguration(locations = {"/spring/dispatcher-account.xml"})  #<3>
})

public class UserControllerTest extends SpringMVCTestNGCase {  #<4>

    @Override
    public void init() {  #<5>
        //buildMockMvc(); #<6>
        this.mockMvc = MockMvcBuilders.standaloneSetup(xxxxxController).build(); #<7>
    }

    @Test
    public void getTest() throws Exception { #<8>
        mockMvc.perform(get("/account/user"))
                .andExpect(jsonPath("metaData.totalElements").value(greaterThanOrEqualTo(1)));
        ;
    }
}
```
<1> 加入spring配置
<2> 这里一般是spring配置
<3> 这里一般是spring-mvc配置
<4> 继承SpringMVCTestNGCase
<5> 这是必须的，要buildMockMvc
<6> 模拟所有controller类
<7> 模拟单个controller类，推荐，只模拟构建你要测试的类即可
<8> 开始一个测试
====

### 数据持久接口测试，基于事务
```java
//子类指定TransactionConfiguration
@TransactionConfiguration(transactionManager = "transactionManager-main", defaultRollback = true)
//子类指定applicationContext
@ContextConfiguration(locations = {"/application-context.xml"})
public class TestRepositoryTest extends SpringTransactionalTestNGCase{
   //...
}
```

### JsonPath和Matchers

JsonPath::
Spring单元测试依赖的json解析工具包，来自 http://goessner.net/articles/JsonPath/

用法：
```java
//读取结点metaData.totalElements的值
.andExpect(jsonPath("metaData.totalElements").value(greaterThanOrEqualTo(1)));
```

Matchers::
这是一个用来数据比较的工具包，来自： http://hamcrest.org/JavaHamcrest/

用法：
```java
//表示大于等于
.andExpect(jsonPath("metaData.totalElements").value(greaterThanOrEqualTo(1)));
```

### TEST PROFILE
默认会启用 `test profile` ，这样会启用内存数据库来做单元测试，在启动时会自动刷新数据结构和加载默认数据。 +
可以通过注解 `@ActiveProfiles(profiles = {”xx”,”xx”})` 添加其它profile，添加的profile会与父类的ActiveProfiles叠加

### 相关参考

. spring profile请参考： http://spring.io/blog/2011/02/14/spring-3-1-m1-introducing-profile/
. Matchers: http://hamcrest.org/JavaHamcrest/
. Matchers: http://hamcrest.org/JavaHamcrest/javadoc/1.3/org/hamcrest/Matchers.html
